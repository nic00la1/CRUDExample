@using Microsoft.AspNetCore.Mvc.TagHelpers
@using Microsoft.AspNetCore.Routing
@using X.PagedList
@using X.Web.PagedList
@model IPagedList<PersonResponse>

@{
    ViewBag.Title = "Persons";
}
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">

<form asp-controller="Persons" asp-action="Index" method="get">
<div class="flex">
    <div class="flex-1">
        <span class="text-grey">Contacts</span>
        <i class="fa-solid fa-caret-right text-grey"></i>
        <span class="text-grey">Persons</span>
    </div>
        
    <div class="flex-1 text-right">
        <a asp-controller="Persons" asp-action="Create" class="btn btn-success text-light">Create new person</a>
        <a asp-controller="Persons" asp-action="PersonsPDF" class="btn btn-primary text-light ml-2">Export to PDF</a>
        <a asp-controller="Persons" asp-action="PersonsCSV" class="btn btn-warning ml-2">Export to CSV</a>
        <a asp-controller="Persons" asp-action="PersonsEXCEL" class="btn btn-warning ml-2">Export to EXCEL</a>
    </div>
</div>
    
<div class="table-container mt-3">
    <div class="flex">
        <div class="flex-1"><h1>Persons</h1></div>
        <div class="flex-3 text-right">
            <label>Search by: </label>
            <select class="form-control d-inline-block w-auto" name="searchBy">
                @foreach (var field in ViewBag.SearchFields)
                {
                    var option = new TagBuilder("option");
                    option.Attributes["value"] = field.Key;
                    if (field.Key == ViewBag.CurrentSearchBy)
                    {
                        option.Attributes["selected"] = "selected";
                    }
                    option.InnerHtml.Append(field.Value);
                    @option
                }
            </select>
                
            <input type="search" id="search" class="form-control d-inline-block w-auto ml-2"
                   placeholder="Search" name="searchString" value="@ViewBag.CurrentSearchString"/>
            <button class="btn btn-primary ml-2">Search</button>
            <a asp-controller="Persons" asp-action="Index" class="btn btn-secondary ml-2 text-light">Clear all</a>
        </div>
    </div>
    
    <div class="d-flex justify-content-between align-items-center mt-3">
        <div>
            <p>Total Records: @Model.TotalItemCount</p>
        </div>
        <div>
            <div class="form-group">
                <label for="pageSize">Records per page:</label>
                <select id="pageSize" name="pageSize" class="form-control d-inline-block w-auto" onchange="updatePageSize(this)">
                    <option value="5" selected="@(ViewBag.CurrentPageSize == 5)">5</option>
                    <option value="10" selected="@(ViewBag.CurrentPageSize == 10)">10</option>
                    <option value="20" selected="@(ViewBag.CurrentPageSize == 20)">20</option>
                    <option value="50" selected="@(ViewBag.CurrentPageSize == 50)">50</option>
                </select>
            </div>
        </div>
        <div class="pager">
            @Html.PagedListPager(Model, page => 
            {
                var routeValues = new RouteValueDictionary
                {
                    { "page", page },
                    { "pageSize", ViewBag.CurrentPageSize }
                };

                if (!string.IsNullOrEmpty(ViewBag.CurrentSearchBy))
                {
                    routeValues["searchBy"] = ViewBag.CurrentSearchBy;
                }

                if (!string.IsNullOrEmpty(ViewBag.CurrentSearchString))
                {
                    routeValues["searchString"] = ViewBag.CurrentSearchString;
                }

                return Url.Action("Index", routeValues);
            }, new PagedListRenderOptions
            {
                LiElementClasses = new[] { "page-item" },
                PageClasses = new[] { "page-link" },
                UlElementClasses = new[] { "pagination" }
            })
        </div>
    </div>

    <table class="table w-100 mt">
        <thead>
        <tr>
            @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData)
            {
                { "ColumnName", nameof(PersonResponse.PersonName) },
                { "ColumnDisplayName", "Person Name" },
            })
            @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData)
            {
                { "ColumnName", nameof(PersonResponse.Email) },
                { "ColumnDisplayName", "Email" },
            }) @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData)
               {
                   { "ColumnName", nameof(PersonResponse.DateOfBirth) },
                   { "ColumnDisplayName", "Date of Birth" },
               })@await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData)
                 {
                     { "ColumnName", nameof(PersonResponse.Age) },
                     { "ColumnDisplayName", "Age" },
                 })@await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData)
                   {
                       { "ColumnName", nameof(PersonResponse.Gender) },
                       { "ColumnDisplayName", "Gender" },
                   })@await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData)
                     {
                         { "ColumnName", nameof(PersonResponse.Country) },
                         { "ColumnDisplayName", "Country" },
                     })@await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData)
                       {
                           { "ColumnName", nameof(PersonResponse.Address) },
                           { "ColumnDisplayName", "Address" },
                       })
            @await Html.PartialAsync("_GridColumnHeader", new ViewDataDictionary(ViewData)
            {
                { "ColumnName", nameof(PersonResponse.ReceiveNewsLetters) },
                { "ColumnDisplayName", "Receive News Letters" },
            })
            <th style="width: 20%">Actions</th>

        </tr>
        </thead>
        <tbody>
        @foreach (PersonResponse person in Model)
        {
            <tr>
                <td style="width: 10%">@person.PersonName</td>
                <td style="width: 20%">@person.Email</td>
                <td style="width: 10%">@person.DateOfBirth?.ToString("dd MMM yyyy")</td>
                <td style="width: 6%">@person.Age</td>
                <td style="width: 8%">@person.Gender</td>
                <td style="width: 10%">@person.Country</td>
                <td style="width: 15%">@person.Address</td>
                <td style="width: 8%">@person.ReceiveNewsLetters</td>
                <td style="width: 20%">
                    <a asp-controller="Persons" asp-action="Edit" asp-route-personID="@person.ID" class="btn btn-primary text-light">Edit</a>
                    <a asp-controller="Persons" asp-action="Delete" asp-route-personID="@person.ID" class="btn btn-danger text-light">Delete</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
        
    <div class="pager">
        @Html.PagedListPager(Model, page => 
        {
            var routeValues = new RouteValueDictionary
            {
                { "page", page },
                { "pageSize", ViewBag.CurrentPageSize }
            };

            if (!string.IsNullOrEmpty(ViewBag.CurrentSearchBy))
            {
                routeValues["searchBy"] = ViewBag.CurrentSearchBy;
            }

            if (!string.IsNullOrEmpty(ViewBag.CurrentSearchString))
            {
                routeValues["searchString"] = ViewBag.CurrentSearchString;
            }

            return Url.Action("Index", routeValues);
        }, new PagedListRenderOptions
        {
            LiElementClasses = new[] { "page-item" },
            PageClasses = new[] { "page-link" },
            UlElementClasses = new[] { "pagination" }
        })
    </div>
</div>
</form>

                
<script>
    function updatePageSize(selectElement) {
        var pageSize = selectElement.value;
        var searchBy = '@ViewBag.CurrentSearchBy';
        var searchString = '@ViewBag.CurrentSearchString';
        var url = '@Url.Action("Index", "Persons")' + '?pageSize=' + pageSize;

        if (searchBy) {
            url += '&searchBy=' + searchBy;
        }

        if (searchString) {
            url += '&searchString=' + searchString;
        }

        window.location.href = url;
    }
</script>